중간고사 1번 문제 나옴
리스트, 스택, 큐, 트리, 그래프
컴퓨터에서 자료를 정리하고 조직화하는 구조.
자료의 특성에 따라서 잘 정리하여 보관하는 구조 + 자료를 처리하는 연산도 포함.
-> 성능과 효율에 큰 영향

선형 자료구조
리스트, 스택, 큐, 덱

비선형 자료구조
트리, 그래프

프로그램 = 자료구조 + 알고리즘
알고리즘의 조건 - [중간고사 문제 1번]
입력, 출력, 명백성, 유한성, 유효성 
어떤 문제를 해결하기 위해, 유한 시간 내에 유효입력에 대한 출력 결과를 얻기 위한, 명학히 잘 정의된 유한 개의 규칙과 절차의 집합

알고리즘의 기술 방법
1) 자연어
2) 흐름도(flow chart) - 복잡한 알고리즘의 경우, 상당히 복잡함
3) 유사코드(pseudo-code) - 덜 구체적인 표현 방법으로 알고리즘 기술에 가장 많이 사용

추상 자료형(ADT)
프로그래머가 추상적으로 정의한 자료형
어떤 자료를 다루고 이들에 대해 어떤 연산이 제공되는지를 기술
데이터나 연산이 무엇인가를 정의함
데이터나 연산을 어떻게 구현할 것인지는 정의하지 않음
(ex print구문, print가 디스플레이에 나타내는 기능이 있는건 알지만 그 안에서 구현이 어떻게 이루어지는 모름)

효율적인 알고리즘 : 수행시간이 짧으면서 컴퓨터 내에 있는 메모리와 같은 자원을 덜 사용하는 알고리즘
(요즘엔 메모리가 풍부해지다보니 시간 쪽을 더 중요하게 보는 것 같다.)

알고리즘의 성능 분석 기법
실행 시간을 측정하는 방법
알고리즘을 실제로 구현해야 하고, 그런데 정확하지 않음(똑같은 환경이 아니기 때문)
-> 좋은 방법은 아님, 어느정도 감이 오는 정도까지는 괜찮다.
얼고리즘의 복잡도를 분석하는 방법
직접 구현하지 않고서도 수행 시간을 분석
알고리즘이 수행하는 연산의 횟수를 측정하여 비교
시간 복잡도 분석 : 수행 시간 분석
공간 복잡도 분석 : 필요한 메모리 분석

시간 복잡도
산술,대입,비교,이동의 기본적인 연산 고려
알고리즘을 이루고 있는 연산들의 횟수를 대략적 숫자로 계산
복잡도 함수 : T(n)
ex) 
1) 
sum = 0 
for i in n: (for 루프에서 index를 돌릴 때 들어가는 대입 연산은 덧셈하지 않는다.)
  sum = sum + i
=> 연산 2*n+1
2)
sum = n*(n+1)/2 => 연산 4번 (대입까지 고려해야 함)
2번 알고리즘이 시간이 적게 든다. (n이 클때를 보고 비교를 하는 것이다.)

점근적 표기
T(n) = n, n^2, n^3.. 최고차항을 표기










